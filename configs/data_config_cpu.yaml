# ==============================================================================
# CONFIGURATION DES DONNÉES POUR CPU (OPTIMISÉE MÉMOIRE)
# ==============================================================================
# Configuration optimisée pour les contraintes matérielles :
# RAM totale : 12 Go, RAM entraînement : 7 Go, CPU : 5 cœurs

# ------------------------------------------------------------------------------
# Répertoire des données
# ------------------------------------------------------------------------------
data_dir: "data/final"

# ------------------------------------------------------------------------------
# Paires de trading disponibles (traitement séquentiel)
# ------------------------------------------------------------------------------
assets:
  - "BTC"
  - "ETH"
  - "SOL"
  - "XRP"
  - "ADA"

# Traitement séquentiel des actifs pour économiser la mémoire
sequential_asset_processing: true

# ------------------------------------------------------------------------------
# Timeframes disponibles (du plus court au plus long)
# ------------------------------------------------------------------------------
timeframes:
  - "5m"
  - "1h"
  - "4h"

# Configuration des caractéristiques par timeframe
features_per_timeframe:
  "5m":
    - "open"
    - "high"
    - "low"
    - "close"
    - "volume"
    - "minutes_since_update"
  "1h":
    - "open"
    - "high"
    - "low"
    - "close"
    - "volume"
    - "minutes_since_update"
  "4h":
    - "open"
    - "high"
    - "low"
    - "close"
    - "volume"
    - "minutes_since_update"

# ------------------------------------------------------------------------------
# Configuration du split des données
# ------------------------------------------------------------------------------
split:
  train_start: "2023-01-01"
  train_end: "2023-10-01"
  val_start: "2023-10-01"
  val_end: "2023-12-01"
  test_start: "2023-12-01"
  test_end: "2024-01-01"

# ------------------------------------------------------------------------------
# Configuration Lazy Chunk Loader (Optimisée Mémoire)
# ------------------------------------------------------------------------------
data_loader:
  # Stratégie de chargement optimisée pour la mémoire
  strategy: "lazy_sequential"
  
  # Taille de batch réduite pour CPU et optimisation mémoire
  batch_size: 32
  
  # Un seul worker pour éviter la surcharge mémoire
  num_workers: 1
  
  # Pas de prefetch pour économiser la mémoire
  prefetch_factor: 1
  
  # Pas de pin_memory sur CPU
  pin_memory: false
  
  # Configuration des chunks
  chunk_config:
    # Taille optimale des chunks
    chunk_size: 1000
    
    # Un seul chunk en mémoire
    max_chunks_in_memory: 1
    
    # Nettoyage agressif
    aggressive_cleanup: true
    
    # Force garbage collection
    force_gc_after_chunk: true

# ------------------------------------------------------------------------------
# Configuration de la fenêtre temporelle
# ------------------------------------------------------------------------------
window:
  # Taille réduite pour économiser la mémoire
  size: 100
  stride: 1
  overlap: true

# ------------------------------------------------------------------------------
# Optimisations Mémoire
# ------------------------------------------------------------------------------
memory_optimizations:
  # Désactiver la mise en cache
  disable_caching: true
  
  # Libération explicite des ressources
  explicit_cleanup: true
  
  # Monitoring de la mémoire
  memory_monitoring: true
  
  # Seuil d'alerte mémoire (80% de 7GB = 5.6GB)
  memory_warning_threshold_mb: 5600
  
  # Seuil critique mémoire (90% de 7GB = 6.3GB)
  memory_critical_threshold_mb: 6300

# ------------------------------------------------------------------------------
# Configuration CPU
# ------------------------------------------------------------------------------
cpu_config:
  # Utiliser 4 des 5 cœurs disponibles
  num_threads: 4
  
  # Optimisations CPU PyTorch
  torch_num_threads: 4
  
  # Désactiver CUDA
  force_cpu: true
