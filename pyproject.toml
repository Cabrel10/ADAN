[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adan-trading-bot"
version = "0.1.0"
description = "Bot de trading algorithmique utilisant le Reinforcement Learning"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Votre Nom", email = "votre.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]
dependencies = [
    "numpy>=1.26.0",
    "pandas>=2.2.0",
    "scikit-learn>=1.4.0",
    "torch>=2.2.0",
    "gymnasium>=0.29.0",
    "stable-baselines3[extra]>=2.2.0",
    "ccxt>=4.2.0",
    "ta>=0.10.0",
    "pyyaml>=6.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=24.0.0",
    "isort>=5.12.0",
    "flake8>=7.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pydocstyle>=6.0.0",
    "autoflake>=2.0.0",
    "yamllint>=1.30.0",
    "markdownlint-cli>=0.30.0",
    "prettier>=3.0.0",
    "mdformat>=0.7.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ipython>=8.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-markdownextradata-plugin>=0.2.0",
    "mkdocs-material-extensions>=1.2.0",
    "mkdocs-minify-plugin>=0.7.0",
    "mkdocs-pdf-export-plugin>=0.6.0",
    "mkdocs-redirects>=1.2.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
lines_after_imports = 2

[tool.flake8]
max-line-length = 88
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "env",
    ".mypy_cache",
    ".pytest_cache",
    "build",
    "dist",
]
per-file-ignores = [
    "__init__.py: F401",
]
max-complexity = 10
select = "E,W,F,B,B9"
extend-ignore = "E203,E501,W503,F403,F401"

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_globals = true
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=xml:coverage.xml --junitxml=junit/test-results.xml"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ResourceWarning",
]

[tool.coverage.run]
source = ["src"]
omit = ["**/__init__.py"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80

exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.bandit]
targets = ["src"]
skips = ["B101"]
recursive = true
confidence = ["high", "medium"]
severity = ["high", "medium"]
level = "LOW"
