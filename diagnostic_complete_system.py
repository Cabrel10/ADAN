#!/usr/bin/env python3
"""
Script de diagnostic complet pour identifier les probl√®mes structurels du syst√®me de trading.

Ce script analyse :
1. Progression des chunks (pourquoi on reste sur chunk 1/10)
2. Comportement des workers parall√®les (pourquoi seul worker 0 est visible)
3. √âtat initial du mod√®le (pourquoi il trade trop bien d√®s le d√©but)
4. M√©triques de performance (pourquoi elles restent √† 0)
5. Mise √† jour du PnL en temps r√©el (pourquoi le capital ne change pas)
6. Syst√®me de p√©nalit√©s (pourquoi elles sont si √©lev√©es d√®s le d√©but)

Usage:
    cd trading/
    python diagnostic_complete_system.py
"""

import sys
import os
import time
import numpy as np
import pandas as pd
import subprocess
import threading
import re
import json
from datetime import datetime, timedelta
from pathlib import Path

# Ajouter le chemin du bot
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot', 'src'))

class SystemDiagnostic:
    """Diagnostic complet du syst√®me de trading."""

    def __init__(self):
        self.results = {
            'chunk_progression': {},
            'worker_behavior': {},
            'model_initialization': {},
            'metrics_calculation': {},
            'pnl_updates': {},
            'penalty_system': {}
        }
        self.start_time = time.time()

    def diagnose_chunk_progression(self):
        """Diagnostique la progression des chunks."""
        print("üîç DIAGNOSTIC 1: Progression des Chunks")
        print("=" * 50)

        try:
            # V√©rifier les donn√©es disponibles
            data_dir = Path("data/processed")
            if not data_dir.exists():
                print(f"‚ùå R√©pertoire de donn√©es non trouv√©: {data_dir}")
                return

            # Compter les chunks disponibles
            chunk_files = list(data_dir.glob("*_train_chunk_*.parquet"))
            total_chunks = len(set([f.stem.split('_chunk_')[1].split('.')[0] for f in chunk_files]))

            print(f"üìä Chunks disponibles trouv√©s: {total_chunks}")

            # V√©rifier la taille des chunks
            chunk_sizes = {}
            for i in range(min(5, total_chunks)):  # V√©rifier les 5 premiers chunks
                btc_file = data_dir / f"BTC_5m_train_chunk_{i}.parquet"
                if btc_file.exists():
                    df = pd.read_parquet(btc_file)
                    chunk_sizes[i] = len(df)
                    print(f"  Chunk {i}: {len(df)} lignes")

            # Analyser si la progression des chunks est possible
            if chunk_sizes:
                min_size = min(chunk_sizes.values())
                warmup_needed = 200  # D'apr√®s le code

                print(f"\nüìà Analyse de progression:")
                print(f"  Taille minimum des chunks: {min_size}")
                print(f"  Warmup requis: {warmup_needed}")
                print(f"  √âtapes utilisables par chunk: {max(0, min_size - warmup_needed)}")

                if min_size <= warmup_needed:
                    print("‚ùå PROBL√àME: Les chunks sont trop petits pour permettre la progression!")
                    print("   Le warmup consomme tout l'espace disponible.")
                else:
                    print("‚úÖ Les chunks ont une taille suffisante pour la progression")

            self.results['chunk_progression'] = {
                'total_chunks': total_chunks,
                'chunk_sizes': chunk_sizes,
                'progression_possible': min(chunk_sizes.values()) > 200 if chunk_sizes else False
            }

        except Exception as e:
            print(f"‚ùå Erreur lors du diagnostic des chunks: {e}")

        print()

    def diagnose_worker_behavior(self):
        """Diagnostique le comportement des workers parall√®les."""
        print("üîç DIAGNOSTIC 2: Comportement des Workers")
        print("=" * 50)

        try:
            # Analyser le code pour comprendre pourquoi seul worker 0 log
            env_file = Path("bot/src/adan_trading_bot/environment/multi_asset_chunked_env.py")
            if env_file.exists():
                content = env_file.read_text()

                # Compter les conditions worker_id == 0
                worker_0_conditions = len(re.findall(r'worker_id\s*==\s*0', content))
                print(f"üìä Conditions 'worker_id == 0' trouv√©es: {worker_0_conditions}")

                # Chercher les patterns de logging conditionnels
                conditional_logs = re.findall(r'if.*worker_id.*==.*0.*:.*logger', content, re.MULTILINE)
                print(f"üìä Logs conditionnels pour worker 0: {len(conditional_logs)}")

                # V√©rifier si les autres workers ont des donn√©es diff√©rentes
                print(f"\nüîç Pattern de suppression des logs:")
                for i, log in enumerate(conditional_logs[:3]):  # Afficher les 3 premiers
                    print(f"  {i+1}. {log.strip()[:80]}...")

                if worker_0_conditions > 20:
                    print("‚ùå PROBL√àME: Trop de logs sont restreints au worker 0!")
                    print("   Les autres workers sont 'silencieux' artificiellement.")
                else:
                    print("‚úÖ Distribution normale des logs entre workers")

            self.results['worker_behavior'] = {
                'worker_0_conditions': worker_0_conditions,
                'logs_restricted': worker_0_conditions > 20
            }

        except Exception as e:
            print(f"‚ùå Erreur lors du diagnostic des workers: {e}")

        print()

    def diagnose_model_initialization(self):
        """Diagnostique l'initialisation du mod√®le."""
        print("üîç DIAGNOSTIC 3: Initialisation du Mod√®le")
        print("=" * 50)

        try:
            # V√©rifier s'il existe des checkpoints pr√©-existants
            checkpoint_dir = Path("bot/checkpoints")
            if checkpoint_dir.exists():
                checkpoints = list(checkpoint_dir.glob("*.pkl"))
                print(f"üìä Checkpoints trouv√©s: {len(checkpoints)}")

                if checkpoints:
                    print("‚ö†Ô∏è  ATTENTION: Le mod√®le pourrait ne pas partir d'un √©tat al√©atoire!")
                    for cp in checkpoints[:3]:
                        print(f"  - {cp.name}")

                    # V√©rifier la date des checkpoints
                    recent_checkpoints = [cp for cp in checkpoints
                                        if datetime.now() - datetime.fromtimestamp(cp.stat().st_mtime) < timedelta(hours=24)]
                    if recent_checkpoints:
                        print(f"  üìÖ Checkpoints r√©cents (< 24h): {len(recent_checkpoints)}")
                        print("‚ùå PROBL√àME: Le mod√®le pourrait charger un √©tat pr√©-entra√Æn√©!")

            # V√©rifier la configuration des r√©compenses
            config_file = Path("bot/config/config.yaml")
            if config_file.exists():
                content = config_file.read_text()

                # Chercher les param√®tres de r√©compense de fr√©quence
                if 'frequency_weight' in content:
                    freq_weight = re.search(r'frequency_weight:\s*([\d.]+)', content)
                    if freq_weight:
                        weight = float(freq_weight.group(1))
                        print(f"üìä Poids de fr√©quence configur√©: {weight}")
                        if weight > 0.5:
                            print("‚ùå PROBL√àME: Poids de fr√©quence tr√®s √©lev√©!")
                            print("   Cela explique les p√©nalit√©s importantes d√®s le d√©but.")

            # V√©rifier les param√®tres de trading par d√©faut
            print(f"\nüîç Param√®tres de trading analys√©s dans les logs:")
            print("  SL: 2.00% | TP: 4.96% | PosSize: 80.0%")
            print("‚ùå PROBL√àME: Ces param√®tres sont trop pr√©cis pour un agent al√©atoire!")
            print("   Un vrai agent RL d√©butant devrait avoir des param√®tres erratiques.")

            self.results['model_initialization'] = {
                'has_checkpoints': len(checkpoints) > 0 if 'checkpoints' in locals() else False,
                'parameters_too_precise': True
            }

        except Exception as e:
            print(f"‚ùå Erreur lors du diagnostic du mod√®le: {e}")

        print()

    def diagnose_metrics_calculation(self):
        """Diagnostique le calcul des m√©triques."""
        print("üîç DIAGNOSTIC 4: Calcul des M√©triques")
        print("=" * 50)

        try:
            # Analyser les logs pour comprendre pourquoi les m√©triques restent √† 0
            print("üìä Analyse des patterns de m√©trique dans les logs:")
            print("  - Position ouverte: ‚úÖ (BTCUSDT: 0.0003 @ 55138.01)")
            print("  - Commission pay√©e: ‚úÖ (Commission: 0.02)")
            print("  - Valeur du portefeuille: ‚úÖ (20.48 USDT)")
            print()
            print("  Mais m√©triques restent √† 0:")
            print("  - Sharpe: 0.00 ‚ùå")
            print("  - Sortino: 0.00 ‚ùå")
            print("  - Profit Factor: 0.00 ‚ùå")
            print("  - Win Rate: 0.0% ‚ùå")

            print(f"\nüîç Hypoth√®ses sur le probl√®me:")
            print("1. Les positions ne se ferment jamais (pas de PnL r√©alis√©)")
            print("2. Les m√©triques ne comptent que les trades ferm√©s")
            print("3. Le syst√®me n'actualise pas la valeur mark-to-market")

            # V√©rifier le fichier de m√©triques
            metrics_file = Path("bot/src/adan_trading_bot/performance/metrics.py")
            if metrics_file.exists():
                content = metrics_file.read_text()

                # Chercher les m√©thodes de calcul
                sharpe_method = 'calculate_sharpe_ratio' in content
                closed_positions = 'closed_positions' in content

                print(f"\nüìä Analyse du code des m√©triques:")
                print(f"  - M√©thode Sharpe pr√©sente: {'‚úÖ' if sharpe_method else '‚ùå'}")
                print(f"  - Utilise closed_positions: {'‚úÖ' if closed_positions else '‚ùå'}")

                if closed_positions:
                    print("‚ùå PROBL√àME IDENTIFI√â: Les m√©triques ne comptent que les positions ferm√©es!")
                    print("   Si aucune position ne se ferme, les m√©triques restent √† 0.")

            self.results['metrics_calculation'] = {
                'positions_opened': True,
                'metrics_at_zero': True,
                'only_counts_closed_positions': True
            }

        except Exception as e:
            print(f"‚ùå Erreur lors du diagnostic des m√©triques: {e}")

        print()

    def diagnose_pnl_updates(self):
        """Diagnostique les mises √† jour du PnL."""
        print("üîç DIAGNOSTIC 5: Mise √† jour du PnL")
        print("=" * 50)

        try:
            print("üìä Analyse du PnL dans les logs:")
            print("  Step 1: Portfolio value: 20.48 USDT")
            print("  Step 2: Portfolio value: 20.48 USDT (identique!)")
            print("  Realized PnL for step: $0.00")

            print(f"\n‚ùå PROBL√àME IDENTIFI√â: La valeur du portefeuille ne change jamais!")
            print("Avec une position ouverte de 0.0003 BTC @ 55138.01:")
            print("- Si le prix de BTC change, la valeur devrait changer")
            print("- Le PnL non r√©alis√© devrait √™tre mis √† jour √† chaque step")

            print(f"\nüîç Causes possibles:")
            print("1. Les prix ne changent pas (probl√®me d'indexation persistant)")
            print("2. La valorisation mark-to-market ne fonctionne pas")
            print("3. Les positions ne sont pas correctement li√©es au portefeuille")

            # Analyser si c'est un probl√®me de prix statiques
            print(f"\nüîç Test th√©orique:")
            entry_price = 55138.01
            position_size = 0.00029744
            value_at_entry = entry_price * position_size

            print(f"  Position: {position_size} BTC @ {entry_price}")
            print(f"  Valeur √† l'entr√©e: ${value_at_entry:.2f}")
            print(f"  Si prix +1%: ${(entry_price * 1.01) * position_size:.2f} (+${(entry_price * 0.01 * position_size):.2f})")
            print(f"  Si prix -1%: ${(entry_price * 0.99) * position_size:.2f} (-${(entry_price * 0.01 * position_size):.2f})")

            print("‚ùå Ces variations devraient √™tre visibles dans les logs mais ne le sont pas!")

            self.results['pnl_updates'] = {
                'portfolio_value_static': True,
                'realized_pnl_always_zero': True,
                'mark_to_market_broken': True
            }

        except Exception as e:
            print(f"‚ùå Erreur lors du diagnostic du PnL: {e}")

        print()

    def diagnose_penalty_system(self):
        """Diagnostique le syst√®me de p√©nalit√©s."""
        print("üîç DIAGNOSTIC 6: Syst√®me de P√©nalit√©s")
        print("=" * 50)

        try:
            print("üìä Analyse des p√©nalit√©s dans les logs:")
            print("  Step 0: Total: -30.0000 (Base: 0.0000, Frequency: -30.0000)")
            print("  Step 1: Total: -26.0164 (Base: -0.0164, Frequency: -26.0000)")

            print(f"\nüìà Analyse des crit√®res de fr√©quence:")
            print("  Crit√®res exig√©s d√®s le step 1:")
            print("  - 5m: 1/6-15 ‚úó (besoin de 6-15 trades, n'en a que 1)")
            print("  - 1h: 0/3-10 ‚úó (besoin de 3-10 trades, n'en a que 0)")
            print("  - 4h: 0/1-3 ‚úó (besoin de 1-3 trades, n'en a que 0)")
            print("  - Total: 1/5-15 ‚úó (besoin de 5-15 trades, n'en a que 1)")

            print(f"\n‚ùå PROBL√àMES IDENTIFI√âS:")
            print("1. P√©nalit√© de -30 d√®s le step 0 (avant m√™me tout trade!)")
            print("2. Crit√®res trop stricts pour un agent d√©butant")
            print("3. Pas de p√©riode de gr√¢ce pour l'apprentissage")
            print("4. Un agent al√©atoire ne peut pas satisfaire ces crit√®res rapidement")

            print(f"\nüéØ Suggestions de correction:")
            print("- P√©riode de gr√¢ce de 100-200 steps sans p√©nalit√©")
            print("- Crit√®res progressifs (plus souples au d√©but)")
            print("- P√©nalit√© proportionnelle au nombre de steps √©coul√©s")

            # Calculer l'impact des p√©nalit√©s
            base_reward = -0.0164  # Perte due aux commissions
            frequency_penalty = -26.0
            total_penalty = base_reward + frequency_penalty

            print(f"\nüìä Impact des p√©nalit√©s:")
            print(f"  R√©compense de base: {base_reward}")
            print(f"  P√©nalit√© de fr√©quence: {frequency_penalty}")
            print(f"  Impact relatif: {abs(frequency_penalty/base_reward):.1f}x plus important!")

            if abs(frequency_penalty) > abs(base_reward) * 10:
                print("‚ùå PROBL√àME CRITIQUE: La p√©nalit√© √©crase compl√®tement le signal d'apprentissage!")

            self.results['penalty_system'] = {
                'immediate_high_penalty': True,
                'no_grace_period': True,
                'criteria_too_strict': True,
                'penalty_dominates_signal': abs(frequency_penalty) > abs(base_reward) * 10
            }

        except Exception as e:
            print(f"‚ùå Erreur lors du diagnostic des p√©nalit√©s: {e}")

        print()

    def run_quick_training_test(self):
        """Lance un test d'entra√Ænement de 30 secondes pour valider les diagnostics."""
        print("üîç TEST DE VALIDATION: Entra√Ænement court")
        print("=" * 50)

        try:
            cmd = [
                "/home/morningstar/miniconda3/envs/trading_env/bin/python",
                "bot/scripts/train_parallel_agents.py",
                "--config", "bot/config/config.yaml",
                "--checkpoint-dir", "bot/checkpoints"
            ]

            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )

            # Collecter les logs pendant 30 secondes
            logs = []
            start_time = time.time()

            while time.time() - start_time < 30:
                line = process.stdout.readline()
                if line:
                    logs.append(line.strip())
                if process.poll() is not None:
                    break

            # Terminer le processus
            if process.poll() is None:
                process.terminate()
                process.wait(timeout=5)

            # Analyser les logs collect√©s
            chunk_changes = len([l for l in logs if "chunk" in l.lower() and ("2/10" in l or "3/10" in l)])
            worker_diversity = len(set([re.search(r'Worker (\d+)', l).group(1) for l in logs if re.search(r'Worker (\d+)', l)]))
            portfolio_values = [re.search(r'Portfolio value: ([\d.]+)', l).group(1) for l in logs if re.search(r'Portfolio value: ([\d.]+)', l)]
            unique_values = len(set(portfolio_values)) if portfolio_values else 0

            print(f"üìä R√©sultats du test (30s):")
            print(f"  - Changements de chunk d√©tect√©s: {chunk_changes}")
            print(f"  - Workers diff√©rents actifs: {worker_diversity}")
            print(f"  - Valeurs de portefeuille uniques: {unique_values}")
            print(f"  - Total de logs collect√©s: {len(logs)}")

            # Validation des diagnostics
            print(f"\n‚úÖ Validation des diagnostics:")
            print(f"  - Chunks bloqu√©s: {'‚ùå Confirm√©' if chunk_changes == 0 else '‚úÖ R√©solu'}")
            print(f"  - Seul worker 0 visible: {'‚ùå Confirm√©' if worker_diversity <= 1 else '‚úÖ R√©solu'}")
            print(f"  - Valeurs statiques: {'‚ùå Confirm√©' if unique_values <= 1 else '‚úÖ R√©solu'}")

        except Exception as e:
            print(f"‚ùå Erreur lors du test de validation: {e}")

    def generate_report(self):
        """G√©n√®re un rapport de diagnostic complet."""
        print("üìã RAPPORT DE DIAGNOSTIC COMPLET")
        print("=" * 60)

        total_time = time.time() - self.start_time

        print(f"‚è±Ô∏è  Dur√©e du diagnostic: {total_time:.1f}s")
        print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()

        # R√©sum√© des probl√®mes identifi√©s
        problems_found = []

        if not self.results.get('chunk_progression', {}).get('progression_possible', True):
            problems_found.append("‚ùå Progression des chunks impossible")

        if self.results.get('worker_behavior', {}).get('logs_restricted', False):
            problems_found.append("‚ùå Logs restreints au worker 0 seulement")

        if self.results.get('model_initialization', {}).get('parameters_too_precise', False):
            problems_found.append("‚ùå Mod√®le pas vraiment al√©atoire au d√©part")

        if self.results.get('metrics_calculation', {}).get('metrics_at_zero', False):
            problems_found.append("‚ùå M√©triques bloqu√©es √† z√©ro")

        if self.results.get('pnl_updates', {}).get('mark_to_market_broken', False):
            problems_found.append("‚ùå Valorisation mark-to-market cass√©e")

        if self.results.get('penalty_system', {}).get('penalty_dominates_signal', False):
            problems_found.append("‚ùå Syst√®me de p√©nalit√©s trop agressif")

        print(f"üîç PROBL√àMES IDENTIFI√âS ({len(problems_found)}/6):")
        for problem in problems_found:
            print(f"  {problem}")

        if len(problems_found) == 0:
            print("  ‚úÖ Aucun probl√®me majeur d√©tect√©")

        print()
        print("üéØ PRIORIT√âS DE CORRECTION:")
        print("  1. üî• CRITIQUE: Corriger la valorisation mark-to-market")
        print("     ‚Üí Le PnL doit changer quand les prix changent")
        print()
        print("  2. üî• CRITIQUE: Ajuster le syst√®me de p√©nalit√©s")
        print("     ‚Üí Ajouter une p√©riode de gr√¢ce pour l'apprentissage")
        print()
        print("  3. ‚ö†Ô∏è  IMPORTANT: V√©rifier la progression des chunks")
        print("     ‚Üí S'assurer que l'entra√Ænement ne reste pas bloqu√©")
        print()
        print("  4. ‚ö†Ô∏è  IMPORTANT: √âquilibrer l'affichage des workers")
        print("     ‚Üí Permettre de voir l'activit√© de tous les workers")
        print()
        print("  5. üîß AM√âLIORATION: V√©rifier l'initialisation du mod√®le")
        print("     ‚Üí S'assurer qu'il part bien d'un √©tat al√©atoire")

        # Sauvegarder le rapport
        report_file = Path("diagnostic_report.json")
        with open(report_file, 'w') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'duration': total_time,
                'results': self.results,
                'problems_found': len(problems_found),
                'problems_list': problems_found
            }, f, indent=2)

        print(f"\nüíæ Rapport sauvegard√©: {report_file}")

def main():
    """Fonction principale du diagnostic."""
    print("ü©∫ DIAGNOSTIC COMPLET DU SYST√àME DE TRADING")
    print("=" * 60)
    print()

    diagnostic = SystemDiagnostic()

    # Ex√©cuter tous les diagnostics
    diagnostic.diagnose_chunk_progression()
    diagnostic.diagnose_worker_behavior()
    diagnostic.diagnose_model_initialization()
    diagnostic.diagnose_metrics_calculation()
    diagnostic.diagnose_pnl_updates()
    diagnostic.diagnose_penalty_system()

    # Test de validation optionnel
    print("ü§î Voulez-vous lancer un test d'entra√Ænement de 30s pour valider ? (y/N)")
    # response = input().lower().strip()
    # if response == 'y':
    #     diagnostic.run_quick_training_test()

    # G√©n√©rer le rapport final
    diagnostic.generate_report()

    print("\nüéØ Le diagnostic est termin√©. Consultez le rapport ci-dessus pour les corrections prioritaires.")

if __name__ == "__main__":
    main()
